<%
const { utils, route, config } = it;
const { requestBodyInfo, responseBodyInfo, specificArgNameResolver } = route;
const { _, getInlineParseContent, getParseContent, parseSchema, getComponentByRef, require } = utils;
const { parameters, path, method, payload, query, formData, security, requestParams } = route.request;
const { type, errorType, contentTypes } = route.response;
const { HTTP_CLIENT, RESERVED_REQ_PARAMS_ARG_NAMES } = config.constants;
const routeDocs = includeFile("@base/route-docs", { config, route, utils });
const queryName = (query && query.name) || "params";
const pathParams = _.values(parameters);
const pathParamsNames = _.map(pathParams, "name");

const isFetchTemplate = config.httpClientType === HTTP_CLIENT.FETCH;

const requestConfigParam = {
    name: specificArgNameResolver.resolve(RESERVED_REQ_PARAMS_ARG_NAMES),
    optional: true,
    type: "HttpParams | undefined",
}

const argToTmpl = ({ name, optional, type, defaultValue }) => `${name}${!defaultValue && optional ? '?' : ''}: ${type}${defaultValue ? ` = ${defaultValue}` : ''}`;

const rawWrapperArgs = config.extractRequestParams ?
    _.compact([
        requestParams && {
          name: pathParams.length ? `{ ${_.join(pathParamsNames, ", ")}, ...${queryName} }` : queryName,
          optional: false,
          type: getParseContent(requestParams, null, ['ESM', 'Application']),
        },
        ...(!requestParams ? pathParams : []),
        payload,
    ]) :
    _.compact([
        ...pathParams,
        query,
        payload,
    ]);

const wrapperArgs = _
    // Sort by optionality
    .sortBy(rawWrapperArgs, [o => o.optional])
    .map(argToTmpl)
    .join(', ');

// RequestParams["type"]
const requestContentKind = {
    "JSON": "ContentType.Json",
    "URL_ENCODED": "ContentType.UrlEncoded",
    "FORM_DATA": "ContentType.FormData",
    "TEXT": "ContentType.Text",
}
// RequestParams["format"]
const responseContentKind = {
    "JSON": '"json"',
    "IMAGE": '"blob"',
    "FORM_DATA": isFetchTemplate ? '"formData"' : '"document"'
};

const bodyTmpl = _.get(payload, "name") || null;
const queryTmpl = (query != null && queryName) || null;
const bodyContentKindTmpl = requestContentKind[requestBodyInfo.contentKind] || null;
const responseFormatTmpl = responseContentKind[responseBodyInfo.success && responseBodyInfo.success.schema && responseBodyInfo.success.schema.contentKind] || null;
const securityTmpl = security ? 'true' : null;

const describeReturnType = () => {
  return `Observable<${type}>`;
};

%>
/**
<%~ routeDocs.description %>

 *<% /* Here you can add some other JSDoc tags */ %>

<%~ routeDocs.lines %>

 */
<%~ route.routeName.usage %>(<%~ wrapperArgs %>): <%~ describeReturnType() %> {
    <% if(requestBodyInfo.contentKind === 'FORM_DATA') { %>
        const formData = new FormData();

        for (const property in <%~ bodyTmpl %>) {
            const d = <%~ bodyTmpl %>[property as keyof <%~ _.get(payload, "type") %>];
            if (Array.isArray(d)) {
              d.forEach((element) => {
                formData.append(property, element);
              });
            } else if (d !== undefined) {
              formData.append(property, d);
            }
        }

        return this.http.<%~ _.lowerCase(method) %><<%~ type %>>(
            this.url + `<%~ path %>`,
            formData,
            <%~ queryTmpl ? `, {params: ObjectHelper.removeUndefinedField(${queryTmpl})},` : '' %>
        );
    <% } else { %>
        return this.http.<%~ _.lowerCase(method) %><<%~ type %>>(
            this.url + `<%~ path %>`
            <%~ bodyTmpl ? `, ${bodyTmpl}` : '' %>
            <%~ _.lowerCase(method) !== 'get' && !bodyTmpl ? `, {}` : '' %>
            <%~ queryTmpl ? `, {params: ObjectHelper.removeUndefinedField(${queryTmpl})},` : '' %>
        );
    <% } %>
}
